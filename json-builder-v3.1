<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DataLayer Designer - Working Version</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .node {
            background: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
        }
        .child-node {
            margin-left: 30px;
            border-left: 3px solid #3b82f6;
            padding-left: 15px;
        }
        .node-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }
        .level-badge {
            background: #3b82f6;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            min-width: 25px;
            text-align: center;
        }
        input, select {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }
        input[type="text"] {
            width: 150px;
        }
        input.comment {
            width: 200px;
        }
        button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
        }
        .btn-primary { background: #3b82f6; color: white; }
        .btn-success { background: #10b981; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn-warning { background: #f59e0b; color: white; }
        .btn-purple { background: #8b5cf6; color: white; }
        button:hover { opacity: 0.9; }
        .json-output {
            background: #1f2937;
            color: #10b981;
            padding: 20px;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            overflow-x: auto;
            font-size: 14px;
            line-height: 1.4;
        }
        .info-box {
            background: #dbeafe;
            border-left: 4px solid #3b82f6;
            padding: 15px;
            margin: 15px 0;
        }
        .no-nodes {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        .header-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ DataLayer Designer</h1>
        <p>Build nested JSON structures for your data layer specifications</p>
        
        <div class="info-box">
            <h3 style="margin-top: 0; color: #1e40af; font-weight: bold;">üìù Formatting Rules:</h3>
            <ul style="margin: 10px 0; padding-left: 20px; color: #374151;">
                <li><strong>Event:</strong> lowercase or camelCase (e.g., "interaction", "quoteStart")</li>
                <li><strong>Object Names:</strong> lowercase (e.g., "challenges", "user_data")</li>
                <li><strong>Variable Names:</strong> lowercase or camelCase (e.g., "category", "stepName")</li>
                <li><strong>Values:</strong> lowercase only (e.g., "extras 50", "credit card")</li>
            </ul>
        </div>

        <div style="margin-bottom: 20px;">
            <label for="jsonName" style="display: block; font-weight: bold; margin-bottom: 5px; color: #374151;">
                üìÑ Specification Name:
            </label>
            <input type="text" id="jsonName" placeholder="Enter name for your JSON specification" 
                   style="width: 100%; max-width: 400px; padding: 10px; border: 2px solid #d1d5db; border-radius: 6px; font-size: 14px;"
                   value="">
        </div>

        <div class="header-buttons">
            <button class="btn-primary" id="addRootBtn">‚ûï Add Root Node</button>
            <button class="btn-success" id="generateBtn">üî® Generate JSON</button>
            <button class="btn-warning" id="copyBtn" style="display:none;">üìã Copy JSON</button>
            <button class="btn-purple" id="downloadBtn" style="display:none;">üíæ Download</button>
            <button class="btn-danger" id="clearBtn" style="display:none;">üóëÔ∏è Clear All</button>
        </div>
    </div>

    <div class="container">
        <div id="nodesContainer">
            <div class="no-nodes" id="emptyMessage">
                <div style="font-size: 48px; margin-bottom: 10px;">üìù</div>
                <p>No nodes yet. Click "Add Root Node" to get started!</p>
            </div>
        </div>
    </div>

    <div class="container" id="jsonContainer" style="display:none;">
        <h3>üìä Generated JSON:</h3>
        <div class="json-output" id="jsonOutput"></div>
    </div>

    <script>
        console.log('Script loading...');
        
        let nodes = [];
        let nodeCounter = 0;

        function generateId() {
            return 'node_' + (++nodeCounter);
        }

        function addRootNode() {
            const node = {
                id: generateId(),
                key: '',
                value: '',
                comment: '',
                type: 'string',
                children: [],
                parentId: null,
                level: 0
            };
            nodes.push(node);
            renderNodes();
            updateButtons();
        }

        function addChildNode(parentId) {
            const parent = findNodeById(parentId);
            if (!parent) return;

            const child = {
                id: generateId(),
                key: '',
                value: '',
                comment: '',
                type: 'string',
                children: [],
                parentId: parentId,
                level: parent.level + 1
            };

            parent.children.push(child);
            renderNodes();
        }

        function findNodeById(id) {
            function search(nodeArray) {
                for (let node of nodeArray) {
                    if (node.id === id) return node;
                    const found = search(node.children);
                    if (found) return found;
                }
                return null;
            }
            return search(nodes);
        }

        function updateNode(id, field, value) {
            const node = findNodeById(id);
            if (node) {
                node[field] = value;
                if (field === 'type' && (value === 'object' || value === 'array')) {
                    node.value = '';
                }
                // Store the focused element before re-rendering
                const focusedElement = document.activeElement;
                const focusedId = focusedElement ? focusedElement.getAttribute('data-focus-id') : null;
                
                renderNodes();
                
                // Restore focus after re-rendering
                if (focusedId) {
                    const elementToFocus = document.querySelector(`[data-focus-id="${focusedId}"]`);
                    if (elementToFocus) {
                        setTimeout(() => elementToFocus.focus(), 0);
                    }
                }
            }
        }

        function deleteNode(id) {
            const node = findNodeById(id);
            
            // Only show confirmation for nodes that have children
            const hasChildren = node && node.children && node.children.length > 0;
            
            if (hasChildren) {
                if (!confirm('Delete this node and all its children?')) {
                    return; // User cancelled
                }
            }
            
            // Remove from root nodes
            nodes = nodes.filter(n => n.id !== id);
            // Remove from children arrays
            function removeFromChildren(nodeArray) {
                nodeArray.forEach(node => {
                    node.children = node.children.filter(child => child.id !== id);
                    removeFromChildren(node.children);
                });
            }
            removeFromChildren(nodes);
            renderNodes();
            updateButtons();
        }

        function renderNodes() {
            const container = document.getElementById('nodesContainer');
            
            if (nodes.length === 0) {
                container.innerHTML = '<div class="no-nodes" id="emptyMessage"><div style="font-size: 48px; margin-bottom: 10px;">üìù</div><p>No nodes yet. Click "Add Root Node" to get started!</p></div>';
                return;
            }
            
            let html = '';
            nodes.forEach(node => {
                html += renderNode(node);
            });
            
            container.innerHTML = html;
        }

        function renderNode(node) {
            const canHaveChildren = node.type === 'object' || node.type === 'array';
            const levelClass = node.level > 0 ? 'child-node' : '';
            
            let html = `<div class="node ${levelClass}">`;
            html += `<div class="node-controls">`;
            html += `<span class="level-badge">L${node.level}</span>`;
            
            // Key input with focus tracking
            html += `<input type="text" placeholder="Key name" value="${node.key}" 
                     data-focus-id="${node.id}-key"
                     onchange="updateNode('${node.id}', 'key', this.value)">`;
            
            // Type select with focus tracking
            html += `<select data-focus-id="${node.id}-type" onchange="updateNode('${node.id}', 'type', this.value)">`;
            html += `<option value="string" ${node.type === 'string' ? 'selected' : ''}>String</option>`;
            html += `<option value="number" ${node.type === 'number' ? 'selected' : ''}>Number</option>`;
            html += `<option value="boolean" ${node.type === 'boolean' ? 'selected' : ''}>Boolean</option>`;
            html += `<option value="object" ${node.type === 'object' ? 'selected' : ''}>Object</option>`;
            html += `<option value="array" ${node.type === 'array' ? 'selected' : ''}>Array</option>`;
            html += `</select>`;
            
            // Value input - only for primitive types, with focus tracking
            if (!canHaveChildren) {
                html += `<input type="text" placeholder="Value" value="${node.value}" 
                         data-focus-id="${node.id}-value"
                         onchange="updateNode('${node.id}', 'value', this.value)">`;
            }
            
            // Comment input with focus tracking
            html += `<input type="text" class="comment" placeholder="Comment (optional)" value="${node.comment}" 
                     data-focus-id="${node.id}-comment"
                     onchange="updateNode('${node.id}', 'comment', this.value)">`;
            
            // Add Child button - only for objects and arrays
            if (canHaveChildren) {
                html += `<button class="btn-success" onclick="addChildNode('${node.id}')">+ Child</button>`;
            }
            
            // Delete button
            html += `<button class="btn-danger" onclick="deleteNode('${node.id}')">Delete</button>`;
            html += `</div>`;
            
            // Render children
            if (node.children && node.children.length > 0) {
                node.children.forEach(child => {
                    html += renderNode(child);
                });
            }
            
            html += `</div>`;
            return html;
        }

        function generateJSON() {
            if (nodes.length === 0) {
                alert('Please add some nodes first!');
                return;
            }

            const jsonString = '{\n' + processNodes(nodes, 1) + '}';
            
            document.getElementById('jsonOutput').textContent = jsonString;
            document.getElementById('jsonContainer').style.display = 'block';
            
            document.getElementById('copyBtn').style.display = 'inline-block';
            document.getElementById('downloadBtn').style.display = 'inline-block';
        }

        function processNodes(nodeArray, level) {
            const indent = '     '.repeat(level);
            let result = '';

            nodeArray.forEach((node, index) => {
                const isLast = index === nodeArray.length - 1;
                const key = `"${node.key}"`;
                const comment = node.comment ? ` // ${node.comment}` : '';

                if (node.type === 'object') {
                    result += `${indent}${key}: {\n`;
                    if (node.children.length > 0) {
                        result += processNodes(node.children, level + 1);
                    }
                    result += `${indent}}${isLast ? '' : ','}${comment}\n`;
                } 
                else if (node.type === 'array') {
                    result += `${indent}${key}: [\n`;
                    if (node.children.length > 0) {
                        result += `${indent}     {\n`;
                        result += processNodes(node.children, level + 2);
                        result += `${indent}     }\n`;
                    }
                    result += `${indent}]${isLast ? '' : ','}${comment}\n`;
                } 
                else {
                    let value = node.value || '';
                    if (node.type === 'string') value = `"${value}"`;
                    else if (node.type === 'number') value = parseFloat(value) || 0;
                    else if (node.type === 'boolean') value = value.toLowerCase() === 'true';
                    
                    result += `${indent}${key}: ${value}${isLast ? '' : ','}${comment}\n`;
                }
            });

            return result;
        }

        function updateButtons() {
            const hasNodes = nodes.length > 0;
            document.getElementById('clearBtn').style.display = hasNodes ? 'inline-block' : 'none';
        }

        function clearAll() {
            if (confirm('Are you sure you want to clear all nodes?')) {
                nodes = [];
                nodeCounter = 0;
                document.getElementById('jsonName').value = ''; // Clear the name field too
                renderNodes();
                updateButtons();
                document.getElementById('jsonContainer').style.display = 'none';
                document.getElementById('copyBtn').style.display = 'none';
                document.getElementById('downloadBtn').style.display = 'none';
            }
        }

        function copyToClipboard() {
            const text = document.getElementById('jsonOutput').textContent;
            navigator.clipboard.writeText(text).then(() => {
                const btn = document.getElementById('copyBtn');
                const originalText = btn.textContent;
                btn.textContent = '‚úÖ Copied!';
                btn.className = 'btn-success';
                setTimeout(() => {
                    btn.textContent = originalText;
                    btn.className = 'btn-warning';
                }, 2000);
            });
        }

        function downloadJSON() {
            const text = document.getElementById('jsonOutput').textContent;
            const jsonName = document.getElementById('jsonName').value.trim();
            
            // Create filename based on user input or default
            let filename = 'data-layer-spec.json';
            if (jsonName) {
                // Clean the filename - remove invalid characters and add .json extension
                const cleanName = jsonName.replace(/[^a-zA-Z0-9\-_\s]/g, '').replace(/\s+/g, '-').toLowerCase();
                filename = cleanName + '.json';
            }
            
            const blob = new Blob([text], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const addRootBtn = document.getElementById('addRootBtn');
            const generateBtn = document.getElementById('generateBtn');
            const copyBtn = document.getElementById('copyBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const clearBtn = document.getElementById('clearBtn');
            
            if (addRootBtn) addRootBtn.addEventListener('click', addRootNode);
            if (generateBtn) generateBtn.addEventListener('click', generateJSON);
            if (copyBtn) copyBtn.addEventListener('click', copyToClipboard);
            if (downloadBtn) downloadBtn.addEventListener('click', downloadJSON);
            if (clearBtn) clearBtn.addEventListener('click', clearAll);
            
            renderNodes();
        });
    </script>
</body>
</html>
